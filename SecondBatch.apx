public class SecondBatch implements Database.Batchable<Map<String, Object>>, 
Database.AllowsCallouts, Database.Stateful {
    private List<Map<String, Object>> commentsList = new List<Map<String, Object>>();
    private List<Integer> namesList = new List<Integer>();
    private List<Account> accList = new List<Account>();
    private Integer postId;
    public SecondBatch(Integer postId){
        this.postId = postId;
    }
    public String getCommentsList(){
        HttpRequest req = new HttpRequest();
        Http http = new Http();
        req.setEndpoint('https://jsonplaceholder.typicode.com/posts/'+postId+'/comments');
        req.setMethod('GET');
        HttpResponse res = http.send(req);
        String body = res.getBody();
        return body;
    }
    public List<Map<String, Object>> start(Database.BatchableContext bc) {
        System.debug('Starting parse pararell request...');
        String body = getCommentsList();
        List<Object> data = (List<Object>) ((Object) JSON.deserializeUntyped(body));
        for ( Object obj : data ) {   
            Map<String, Object> comment = (Map<String, Object>) obj;
            commentsList.add(comment);
        } 
        return commentsList;
    }
    public void execute(Database.BatchableContext bc, List<Map<String, Object>> commentsList) { 
        System.debug('Executing parse pararell request...');
        Set<String> nameSet = new Set<String>();
        for ( Map<String, Object> comment : commentsList ) {
            String name = (String) comment.get('name');
            nameSet.add(name);
            Account acc = new Account(Name=name);
            accList.add(acc);
        }
        List<Account> existingAccList = [SELECT Id, Name FROM Account WHERE Name IN : nameSet ];
        Map<String, Account> existingAccM = new Map<String, Account>();
        for( Account a : existingAccList ) {
            existingAccM.put(a.name, a);
        }
        for( Account a : accList ) {
            Account exAcc = existingAccM.get(a.Name);
            if(exAcc!=null){
            	a.Id = exAcc.Id;    
            }
        }
    }
    public void finish(Database.BatchableContext bc) {
        List<Database.UpsertResult> upRs = Database.upsert(accList);
        Integer c = 0;
        for(Database.UpsertResult upR:upRs){
            if(upR.isSuccess()){
                c++;
            }
        }
        System.debug('Success to upsert ' + c + ' accounts.');
        System.debug('Job for comments of a post finished.');
    }
}
